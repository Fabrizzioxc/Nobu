---
// Header.astro — Nobu
// Navbar reutilizable con colores desde variables CSS en global.css
// Paleta: --color-bg: #0D0D0D; --color-primary: #6EAEFE
// Requiere: /nobulogo.svg y opcional <MobileMenu /> para móvil

const links = [
  { href: "/#nosotros", label: "Nosotros" },
  { href: "/#proceso", label: "Proceso" },
  { href: "/#portfolio", label: "Portfolio" },
];
import MobileMenu from "./MobileMenu";
---

<!-- Shell fijo con encogimiento al hacer scroll -->
<div id="nav-shell"
     class="group pointer-events-none fixed inset-x-0 top-3 z-50 transition-all duration-500 ease-out
            [--mx:1rem] sm:[--mx:1.25rem]">
  <div class="pointer-events-auto mx-auto w-[min(100%-var(--mx)*2,76rem)] transition-all duration-500 ease-out
              [data-shrink=true]:w-[min(100%-var(--mx)*2,64rem)]">

    <nav class="flex items-center justify-between gap-4 rounded-2xl px-4 py-3 sm:px-6 sm:py-3.5
                transition-all duration-500 ease-out shadow-[0_8px_40px_rgba(0,0,0,.55)]
                [data-shrink=false]:bg-[rgba(13,13,13,0.30)] [data-shrink=false]:backdrop-blur-md
                [data-shrink=true]:bg-[rgba(13,13,13,0.55)] [data-shrink=true]:backdrop-blur-xl">

      <!-- borde sutil (ring) -->
      <div aria-hidden class="pointer-events-none absolute inset-0 rounded-2xl" style="box-shadow: inset 0 0 0 1px rgba(255,255,255,0.06)"></div>

      <!-- Brand -->
      <a href="/" class="relative flex items-center gap-2 nav-link" data-section="hero">
        <img src="/nobulogo.svg" alt="Nobu" class="h-9 w-9 rounded-lg" />
        <span class="hidden sm:block font-semibold text-xl tracking-tight text-white">Nobu</span>
      </a>

      <!-- Links desktop -->
      <ul class="relative hidden items-center gap-10 md:flex text-[0.95rem]">
        {links.map((l) => (
          <li>
            <a href={l.href} class="text-white/80 hover:text-white transition-colors nav-link" data-section={l.href.replace('/#', '')}>
              {l.label}
            </a>
          </li>
        ))}
      </ul>

      <!-- CTA desktop -->
      <div class="relative hidden items-center md:flex">
        <a href="/#contacto" class="inline-flex items-center gap-2 rounded-full px-4 py-2.5 text-[0.95rem] font-semibold text-[color:var(--color-bg)] shadow-[0_10px_30px_rgba(0,0,0,.35)] transition
                   focus:outline-none focus-visible:ring-2" style="background: var(--color-primary);">
          Contacto
          <svg viewBox="0 0 24 24" width="18" height="18" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="text-[color:var(--color-bg)]"><path d="M7 17L17 7"/><path d="M7 7h10v10"/></svg>
        </a>
      </div>

      <!-- Menú móvil -->
      <div class="md:hidden">
        <MobileMenu client:load />
      </div>
    </nav>
  </div>

  <script is:inline>
    const shell = document.getElementById('nav-shell');
    const nav = shell.querySelector('nav');
    const toggle = () => {
      const shrink = window.scrollY > 8;
      shell?.setAttribute('data-shrink', shrink ? 'true' : 'false');
      nav?.setAttribute('data-shrink', shrink ? 'true' : 'false');
    };
    toggle();
    window.addEventListener('scroll', toggle, { passive: true });

    // Navegación suave y manejo de brand / hashes
    document.addEventListener('DOMContentLoaded', () => {
      const navLinks = document.querySelectorAll('.nav-link');
      navLinks.forEach((link) => {
        link.addEventListener('click', (e) => {
          const href = link.getAttribute('href');
          const section = link.getAttribute('data-section');

          if (section === 'hero') {
            if (window.location.pathname === '/' || window.location.pathname === '/index.html') {
              e.preventDefault();
              window.scrollTo({ top: 0, behavior: 'smooth' });
              history.pushState(null, '', '/');
              return;
            }
            return; // si está en otra página, deja navegar
          }

          if (window.location.pathname === '/' || window.location.pathname === '/index.html') {
            return; // comportamiento normal de hash
          }

          e.preventDefault();
          window.location.href = href;
        });
      });
    });

    document.addEventListener('click', (e) => {
      const link = e.target.closest('a[href^="/#"]');
      if (!link) return;
      const href = link.getAttribute('href');
      const hash = href.substring(1);
      if (window.location.pathname === '/' || window.location.pathname === '/index.html') {
        const target = document.querySelector(hash);
        if (target) {
          e.preventDefault();
          target.scrollIntoView({ behavior: 'smooth', block: 'start' });
          history.pushState(null, '', href);
        }
      }
    });
  </script>
</div>
